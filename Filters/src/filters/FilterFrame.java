/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package filters;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Label;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

/**
 *
 * @author Kyle
 */
public class FilterFrame extends javax.swing.JFrame {
    static double factor, bias, sum;
    BufferedImage img;
    double fblur[][] = {{0, 0, 1, 0, 0}, {0, 1, 1, 1, 0}, {1, 1, 1, 1, 1}, {0, 1, 1, 1, 0}, {0, 0, 1, 0, 0}};
    double fsharpen[][] = {{-1, -1, -1}, {-1, 9, -1}, {-1, -1, -1}};
    double fedges[][] = {{-1, -1, -1}, {-1, 8, -1}, {-1, -1, -1}};
    double femboss[][] = {{-1, -1, 0}, {-1, 0, 1}, {0, 1, 1}};
    double fmean[][] = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};
    double gauss[][][] = new double[11][14][14];

    
    /**
     * Creates new form FilterFrame
     */
    public FilterFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ImgFilteredLabel = new javax.swing.JLabel();
        ImgOriginalLabel = new javax.swing.JLabel();
        BtnDisplay = new javax.swing.JButton();
        BtnBlur = new javax.swing.JButton();
        BtnSharpen = new javax.swing.JButton();
        BtnEdges = new javax.swing.JButton();
        BtnEmboss = new javax.swing.JButton();
        BtnMean = new javax.swing.JButton();
        BtnGauss = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(java.awt.Color.white);

        ImgFilteredLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        ImgOriginalLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        BtnDisplay.setText("DIsplay");
        BtnDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDisplayActionPerformed(evt);
            }
        });

        BtnBlur.setText("Blur");
        BtnBlur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBlurActionPerformed(evt);
            }
        });

        BtnSharpen.setText("Sharpen");
        BtnSharpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSharpenActionPerformed(evt);
            }
        });

        BtnEdges.setText("Edge");
        BtnEdges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEdgesActionPerformed(evt);
            }
        });

        BtnEmboss.setText("Emboss");
        BtnEmboss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEmbossActionPerformed(evt);
            }
        });

        BtnMean.setText("Mean");
        BtnMean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnMeanActionPerformed(evt);
            }
        });

        BtnGauss.setText("Gauss");
        BtnGauss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnGaussActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ImgFilteredLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(BtnDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BtnBlur, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(BtnSharpen)
                .addGap(18, 18, 18)
                .addComponent(BtnEdges, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BtnEmboss)
                .addGap(18, 18, 18)
                .addComponent(BtnMean, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BtnGauss, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(371, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(49, 49, 49)
                    .addComponent(ImgOriginalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(556, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(ImgFilteredLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BtnDisplay)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnBlur)
                    .addComponent(BtnSharpen)
                    .addComponent(BtnEdges)
                    .addComponent(BtnEmboss)
                    .addComponent(BtnMean)
                    .addComponent(BtnGauss))
                .addContainerGap(107, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(40, 40, 40)
                    .addComponent(ImgOriginalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(206, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public static void displayImage(BufferedImage image, JLabel label) {
        
        if (image == null) {
            label.setIcon(null);
        } 
	else {    
            Image im = image.getScaledInstance(200, 200, BufferedImage.SCALE_SMOOTH);
            label.setIcon(new ImageIcon(im));
        }
    }

    public BufferedImage copyOfImage(BufferedImage image) {
        BufferedImage temp = new BufferedImage(image.getWidth(),
                image.getHeight(), BufferedImage.TYPE_INT_RGB);
        for (int x = 0; x < image.getWidth(); x++) {
            for (int y = 0; y < image.getHeight(); y++) {
                int color = image.getRGB(x, y);
                temp.setRGB(x, y, color);
            }
        }
        return temp;
    }
    
    public static BufferedImage imageToBufferedImage(Image im) {
        BufferedImage bi = new BufferedImage
            (im.getWidth(null),im.getHeight(null),BufferedImage.TYPE_INT_RGB);
        Graphics bg = bi.getGraphics();
        bg.drawImage(im, 0, 0, null);
        bg.dispose();
        return bi;
    }
    
    public static BufferedImage filter(BufferedImage img, double[][] f){
        BufferedImage image = new BufferedImage(img.getWidth(), img.getHeight(),BufferedImage.TYPE_INT_RGB);
        double red, green, blue;
        int imageX, imageY;
        
        for (int x =0; x < img.getWidth(); x++){
            for (int y = 0; y < img.getHeight(); y++){
                red = 0.0;
                green = 0.0;
                blue = 0.0;
                
                for (int i = 0; i < f.length; i++){
                    for (int j = 0; j < f[i].length; j++){
                        imageX = (x - f[i].length / 2 + i + img.getWidth()) % img.getWidth();
                        imageY = (y - f.length / 2 + j + img.getHeight()) % img.getHeight();
                        
                        Color c = new Color(img.getRGB(imageX, imageY));
                        red += c.getRed() * f[i][j];
                        green += c.getGreen() * f[i][j];
                        blue += c.getBlue() * f[i][j];
                              
                    }
                }
                
                red = Math.min(factor * Math.max(red, 0) + bias, 255);
                green = Math.min(factor * Math.max(green, 0) + bias, 255);
                blue = Math.min(factor * Math.max(blue, 0) + bias, 255);
                
                image.setRGB(x, y, new Color((int)red, (int)green, (int)blue).getRGB());
                
                
            }
        }
        return image;
    }
    
    public static BufferedImage filter2(BufferedImage img, double[][][] f){
        BufferedImage image = new BufferedImage
            (img.getWidth(),img.getHeight(),BufferedImage.TYPE_INT_RGB);
        double red, green, blue, maxred, maxgreen = 0.0, maxblue = 0.0;
        int grey, imageX, imageY;
        
        for (int x = 0; x < img.getWidth(); x++){
            for (int y = 0; y  < img.getHeight(); y++){
                red = 0.0;
                green = 0.0;
                blue = 0.0;
                maxred = 0.0;
                for (int k = 0; k < f.length; k++){
                    for (int i =0; i < f[i].length; i++){
                        for (int j =0; j < f[j].length; j++){
                            imageX = (x - f[j].length / 2 + i + img.getWidth()) 
                                    % img.getWidth();
                            imageY = (y - f[i].length / 2 + j + img.getHeight())
                                    % img.getHeight();
                            
                            Color c = new Color(img.getRGB(imageX, imageY));
                            red += c.getRed() * f[k][i][j];
                            green += c.getGreen() * f[k][i][j];
                            blue += c.getBlue() * f[k][i][j];
                        }
                    }
                    if (maxred + maxgreen + maxblue < red + green + blue)
                        maxred = red;
                        maxgreen = green;
                        maxblue = blue;
                }
                
                red = Math.min(factor * Math.max(red, 0), 255);
                green = Math.min(factor * Math.max(green, 0), 255);
                blue = Math.min(factor * Math.max(blue, 0), 255);
                
                grey = (int) ((red + green + blue) / 3);
                image.setRGB(x, y, new Color(grey, grey, grey).getRGB());                
            }
        }
        return image;
    }
    
    private void rotate(double[][][] a, int k){
        int theta = k * 15;
        double sx = 0.5;
        double sy = 2.0;
        double sxy = 1.0;
        sum = 0;
        double x, y;
        double rTheta = theta / 180 * Math.PI;
        for (int i = -7; i < 7; i++){
            for (int j = -7; j <7; j++){
                x = i * Math.cos(rTheta) - j * Math.sin(rTheta);
                y = i * Math.sin(rTheta) + j * Math.cos(rTheta);
                a[k][7+i][7+j] = Math.exp(-(x * x / (2 * sx * sx) + y * y / (2 * sy * sy))) 
                        / (2 * Math.PI * sx * sy)- Math.exp(-(x * x / (2 * sxy * sxy) + y * y 
                                / (2 * sxy * sxy))) / (2 * Math.PI * sxy * sxy);
                a[k][7+i][7+j] *= 30;
            }
        }
    }
    
    private void buildGaussian(double[][][] a){
        for (int k = 0; k < a.length; k++){
            rotate(a,k);
        }
    }
    
    private void BtnBlurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBlurActionPerformed
        // TODO add your handling code here:
        BufferedImage img2 = new BufferedImage
            (img.getWidth(),img.getHeight(),BufferedImage.TYPE_INT_RGB);
        factor = 1.0 / 13;
        bias = 0.0;
        img2 = filter(img, fblur);
        
        Image dimg = img2.getScaledInstance(ImgFilteredLabel.getWidth(), ImgFilteredLabel.getHeight(),
        Image.SCALE_SMOOTH);
        
        ImgFilteredLabel.setIcon(new ImageIcon(dimg));
        
    }//GEN-LAST:event_BtnBlurActionPerformed

    private void BtnDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDisplayActionPerformed

        try {
            img = ImageIO.read(new File("E:\\Netbeans_Projects\\Filters\\lion200x200.jpg"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        Image dimg = img.getScaledInstance(ImgOriginalLabel.getWidth(), ImgOriginalLabel.getHeight(),
        Image.SCALE_SMOOTH);
        
        ImgOriginalLabel.setIcon(new ImageIcon(dimg));
        
    }//GEN-LAST:event_BtnDisplayActionPerformed

    private void BtnSharpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSharpenActionPerformed
        // TODO add your handling code here:
        BufferedImage img2 = new BufferedImage
            (img.getWidth(),img.getHeight(),BufferedImage.TYPE_INT_RGB);
        factor = 1.0;
        bias = 0.0;
        img2 = filter(img, fsharpen);
        
        Image dimg = img2.getScaledInstance(ImgFilteredLabel.getWidth(), ImgFilteredLabel.getHeight(),
        Image.SCALE_SMOOTH);
        
        ImgFilteredLabel.setIcon(new ImageIcon(dimg));
    }//GEN-LAST:event_BtnSharpenActionPerformed

    private void BtnEdgesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEdgesActionPerformed
        // TODO add your handling code here:
        BufferedImage img2 = new BufferedImage
            (img.getWidth(),img.getHeight(),BufferedImage.TYPE_INT_RGB);
        factor = 1.0;
        bias = 0.0;
        img2 = filter(img, fedges);
        
        Image dimg = img2.getScaledInstance(ImgFilteredLabel.getWidth(), ImgFilteredLabel.getHeight(),
        Image.SCALE_SMOOTH);
        
        ImgFilteredLabel.setIcon(new ImageIcon(dimg)); 
    }//GEN-LAST:event_BtnEdgesActionPerformed

    private void BtnEmbossActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEmbossActionPerformed
        // TODO add your handling code here:
        BufferedImage img2 = new BufferedImage
            (img.getWidth(),img.getHeight(),BufferedImage.TYPE_INT_RGB);
        factor = 1.0;
        bias = 0.0;
        img2 = filter(img, femboss);
        
        Image dimg = img2.getScaledInstance(ImgFilteredLabel.getWidth(), ImgFilteredLabel.getHeight(),
        Image.SCALE_SMOOTH);
        
        ImgFilteredLabel.setIcon(new ImageIcon(dimg));
    }//GEN-LAST:event_BtnEmbossActionPerformed

    private void BtnMeanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnMeanActionPerformed
        // TODO add your handling code here:
        BufferedImage img2 = new BufferedImage
            (img.getWidth(),img.getHeight(),BufferedImage.TYPE_INT_RGB);
        factor = 1.0 / 9;
        bias = 0.0;
        img2 = filter(img, fmean);
        
        Image dimg = img2.getScaledInstance(ImgFilteredLabel.getWidth(), ImgFilteredLabel.getHeight(),
        Image.SCALE_SMOOTH);
        
        ImgFilteredLabel.setIcon(new ImageIcon(dimg));
    }//GEN-LAST:event_BtnMeanActionPerformed

    private void BtnGaussActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnGaussActionPerformed
        // TODO add your handling code here:
        buildGaussian(gauss);
        BufferedImage img2 = new BufferedImage
            (img.getWidth(),img.getHeight(),BufferedImage.TYPE_INT_RGB);
        factor = 1.0;
        bias = 0.0;
        img2 = filter2(img, gauss);
        
        Image dimg = img2.getScaledInstance(ImgFilteredLabel.getWidth(), ImgFilteredLabel.getHeight(),
        Image.SCALE_SMOOTH);
        
        ImgFilteredLabel.setIcon(new ImageIcon(dimg));      
    }//GEN-LAST:event_BtnGaussActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FilterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FilterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FilterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FilterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FilterFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnBlur;
    private javax.swing.JButton BtnDisplay;
    private javax.swing.JButton BtnEdges;
    private javax.swing.JButton BtnEmboss;
    private javax.swing.JButton BtnGauss;
    private javax.swing.JButton BtnMean;
    private javax.swing.JButton BtnSharpen;
    private javax.swing.JLabel ImgFilteredLabel;
    private javax.swing.JLabel ImgOriginalLabel;
    // End of variables declaration//GEN-END:variables
}
